import { useEffect, useState } from "react";

export default function InsertReplacePlaceholder() {
  const [processes, setProcesses] = useState([]);
  const [lastFocus, setLastFocus] = useState(null);

  useEffect(() => {
    const updateData = async () => {
      if (window.electron?.getProcesses) {
        const processesResult = await window.electron.getProcesses();
        setProcesses(processesResult);
      }

      const proc = await window.electron.getActiveProcess();
      if (proc && (proc === "WINWORD.EXE" || proc === "EXCEL.EXE")) {
        await window.electron.setLastActiveProcess(proc);
        setLastFocus(proc);
      }
    };

    updateData();
    const interval = setInterval(updateData, 5000);
    return () => clearInterval(interval);
  }, []);

  const handlePlaceholderInsert = async () => {
    const placeholders = {
      "($student_name)": "–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
      "($teacher)": "–°–º–∏—Ä–Ω–æ–≤–∞ –ê.–ê.",
      "($specialization)": "–ü—Ä–∞–≤–æ–≤–µ–¥–µ–Ω–∏–µ",
      "—Ç–µ–∫—Å—Ç": "–ó–ê–ú–ï–ù–ê"
    };

    if (!lastFocus || lastFocus !== "WINWORD.EXE") {
      alert("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Word. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç Word.");
      return;
    }

    try {
      const result = await window.electron.replacePlaceholdersInWord(placeholders);
      if (!result) {
        alert("‚ö†Ô∏è –ú–µ—Ç–∫–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç Word –æ—Ç–∫—Ä—ã—Ç.");
      }
    } catch (err) {
      alert(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
      console.error("–û—à–∏–±–∫–∞ –≤ ReplacePlaceholdersInWord:", err);
    }
  };

  return (
    <div>
      <h2>üß† –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É</h2>
      <ul>
        {processes.map((p, i) => (
          <li key={i}>{p.name}</li>
        ))}
      </ul>
      <p>–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: <b>{lastFocus}</b></p>
      <button onClick={handlePlaceholderInsert}>üìÑ –ó–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–∫–∏</button>

    </div>
  );
}
